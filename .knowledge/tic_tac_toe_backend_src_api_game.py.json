{"is_source_file": true, "format": "Python", "description": "This source file implements a REST API for a Tic Tac Toe game using FastAPI. It includes endpoints for starting a game, making moves, retrieving game state, and fetching match history. The code manages game state, move validation, winner determination, and interacts with a database using SQLAlchemy ORM models.", "external_files": ["./db", "./auth", "./schemas"], "external_methods": ["get_session_factory", "get_current_user"], "published": ["router"], "classes": [{"name": "StartGameRequest", "description": "Schema for starting a new game request, potentially including opponent username and game mode."}, {"name": "StartGameResponse", "description": "Schema for response when starting a new game, including game ID and status."}, {"name": "MoveRequest", "description": "Schema representing a move input (row, column)."}, {"name": "MoveResponse", "description": "Schema representing the response after making a move, including the updated board, status, winner, and draw indicator."}, {"name": "GameStateResponse", "description": "Schema providing detailed game state such as board, current turn, moves, players, winner, and status."}, {"name": "MoveEntry", "description": "Schema for individual move details in game history."}, {"name": "GameHistoryResponse", "description": "Schema returning a list of historical game summaries."}, {"name": "HistoryEntry", "description": "Schema for individual game history entry."}], "methods": [{"name": "start_game( req: StartGameRequest = Body(...), db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )", "description": "Creates a new tic-tac-toe game, either against another player or the computer.", "scope": "", "scopeKind": ""}, {"name": "make_move( game_id: int = Path(..., description=\"ID of the game\"), move: MoveRequest = Body(...), db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )", "description": "Processes a move made by a user, validates move legality, updates game state, checks for winner or draw, and finalizes game if finished.", "scope": "", "scopeKind": ""}, {"name": "get_game_state( game_id: int = Path(..., description=\"ID of the game\"), db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )", "description": "Retrieves the current state of a specific game, including board, moves, and player info.", "scope": "", "scopeKind": ""}, {"name": "get_game_history( db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )", "description": "Returns the match history of the authenticated user.", "scope": "", "scopeKind": ""}, {"name": "check_winner(board)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "empty_board()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "List[List[Optional[str]]] reconstruct_board(moves: List[Move])", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["db.query(User).filter(...)", "db.query(Game).filter(...)", "db.query(Move).filter(...)", "db.query(MatchHistory).filter(...)", "db.query(User).filter(...).first()", "db.query(MatchHistory).order_by(...)", "db.add(...)", "db.commit()", "db.refresh(...)"], "search-terms": ["tic tac toe backend API", "game move handler", "game start endpoint", "game state retrieval", "match history API", "SQLAlchemy game model", "FastAPI route", "board reconstruction"], "state": 2, "file_id": 9, "knowledge_revision": 24, "git_revision": "", "ctags": [{"_type": "tag", "name": "check_winner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^def check_winner(board):$/", "language": "Python", "kind": "function", "signature": "(board)"}, {"_type": "tag", "name": "empty_board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^def empty_board():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_game_history", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^def get_game_history($/", "language": "Python", "kind": "function", "signature": "( db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_game_state", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^def get_game_state($/", "language": "Python", "kind": "function", "signature": "( game_id: int = Path(..., description=\"ID of the game\"), db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )"}, {"_type": "tag", "name": "make_move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^def make_move($/", "language": "Python", "kind": "function", "signature": "( game_id: int = Path(..., description=\"ID of the game\"), move: MoveRequest = Body(...), db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )"}, {"_type": "tag", "name": "reconstruct_board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^def reconstruct_board(moves: List[Move]) -> List[List[Optional[str]]]:$/", "language": "Python", "typeref": "typename:List[List[Optional[str]]]", "kind": "function", "signature": "(moves: List[Move])"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^router = APIRouter($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "start_game", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-tracker-96d0ce4e/tic_tac_toe_backend/src/api/game.py", "pattern": "/^def start_game($/", "language": "Python", "kind": "function", "signature": "( req: StartGameRequest = Body(...), db: Session = Depends(get_session_factory()), current_user: User = Depends(get_current_user) )"}], "hash": "aabaec320cc91ea3de4dde628a6ae5fc", "format-version": 4, "code-base-name": "tic_tac_toe_backend", "filename": "tic_tac_toe_backend/src/api/game.py", "fields": [{"name": "router = APIRouter(", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"24": ""}]}